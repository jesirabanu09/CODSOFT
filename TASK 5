import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

// Class to represent a course
class Course {
    private String code;
    private String title;
    private String description;
    private int capacity;
    private String schedule;
    private int enrolledStudents;

    public Course(String code, String title, String description, int capacity, String schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = 0;
    }

    public String getCode() {
        return code;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public String getSchedule() {
        return schedule;
    }

    public int getEnrolledStudents() {
        return enrolledStudents;
    }

    public boolean enrollStudent() {
        if (enrolledStudents < capacity) {
            enrolledStudents++;
            return true;
        } else {
            return false;
        }
    }

    public boolean dropStudent() {
        if (enrolledStudents > 0) {
            enrolledStudents--;
            return true;
        } else {
            return false;
        }
    }
}

// Class to represent a student
class Student {
    private String id;
    private String name;
    private ArrayList<Course> registeredCourses;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public ArrayList<Course> getRegisteredCourses() {
        return registeredCourses;
    }

    public boolean registerCourse(Course course) {
        if (registeredCourses.contains(course)) {
            System.out.println("Already registered for this course.");
            return false;
        } else if (course.enrollStudent()) {
            registeredCourses.add(course);
            return true;
        } else {
            System.out.println("Course is full.");
            return false;
        }
    }

    public boolean dropCourse(Course course) {
        if (registeredCourses.remove(course)) {
            course.dropStudent();
            return true;
        } else {
            System.out.println("Not registered for this course.");
            return false;
        }
    }
}

// Main class to manage the course registration system
public class CourseRegistrationSystem {
    private static HashMap<String, Course> courses = new HashMap<>();
    private static HashMap<String, Student> students = new HashMap<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        // Adding some sample courses
        courses.put("CS101", new Course("CS101", "Introduction to Computer Science", "Basics of CS", 2, "MWF 9-10 AM"));
        courses.put("MATH101", new Course("MATH101", "Calculus I", "Introduction to Calculus", 3, "TTh 11-12:30 PM"));

        // Adding some sample students
        students.put("S1001", new Student("S1001", "Alice"));
        students.put("S1002", new Student("S1002", "Bob"));

        boolean exit = false;

        while (!exit) {
            System.out.println("\nCourse Registration System Menu:");
            System.out.println("1. List Courses");
            System.out.println("2. Register for a Course");
            System.out.println("3. Drop a Course");
            System.out.println("4. List Registered Courses");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    listCourses();
                    break;
                case 2:
                    registerForCourse();
                    break;
                case 3:
                    dropCourse();
                    break;
                case 4:
                    listRegisteredCourses();
                    break;
                case 5:
                    exit = true;
                    System.out.println("Exiting Course Registration System.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }

    private static void listCourses() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses.values()) {
            System.out.println(course.getCode() + ": " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Schedule: " + course.getSchedule());
            System.out.println("Capacity: " + course.getCapacity() + ", Enrolled: " + course.getEnrolledStudents());
            System.out.println("Available slots: " + (course.getCapacity() - course.getEnrolledStudents()));
            System.out.println();
        }
    }

    private static void registerForCourse() {
        System.out.print("\nEnter your student ID: ");
        String studentId = scanner.next();
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        System.out.print("Enter course code to register: ");
        String courseCode = scanner.next();
        Course course = courses.get(courseCode);
        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        if (student.registerCourse(course)) {
            System.out.println("Successfully registered for " + course.getTitle());
        }
    }

    private static void dropCourse() {
        System.out.print("\nEnter your student ID: ");
        String studentId = scanner.next();
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        System.out.print("Enter course code to drop: ");
        String courseCode = scanner.next();
        Course course = courses.get(courseCode);
        if (course == null) {
            System.out.println("Course not found.");
            return;
        }

        if (student.dropCourse(course)) {
            System.out.println("Successfully dropped " + course.getTitle());
        }
    }

    private static void listRegisteredCourses() {
        System.out.print("\nEnter your student ID: ");
        String studentId = scanner.next();
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }

        System.out.println("\nRegistered Courses for " + student.getName() + ":");
        for (Course course : student.getRegisteredCourses()) {
            System.out.println(course.getCode() + ": " + course.getTitle() + " (" + course.getSchedule() + ")");
        }
    }
}

